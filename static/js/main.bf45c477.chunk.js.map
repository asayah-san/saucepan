{"version":3,"sources":["components/components.js","i18n.js","form/form.tsx","sauces/sauces.tsx","saucepan/saucepan.tsx","core/core.tsx","index.tsx"],"names":["InputHint","props","theme","marginY","hintColor","fontWeight","className","hint","Input","paddingX","paddingY","background","ringColor","ringColorFocus","textColor","type","id","name","value","onChange","DismissButton","onClick","IconButton","marginX","backgroundHover","icon","TextButton","text","NavigationItem","header","i18n","use","LanguageDetector","init","resources","en","translations","en_strings","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","then","insert_sauce_id","insert_sauce_question","insert_sauce_answer","update_sauce_id","update_sauce_question","update_sauce_answer","FormHeader","onDismiss","t","Creator","creatorTheme","this","isShown","onSubmit","e","saucepanId","Component","Editor","onInputChanged","event","target","setState","question","answer","state","editorTheme","List","onCreate","sauces","map","sauce","autoRenderToMarkdown","onEdit","onRemove","onCopy","renderItem","Item","concat","output","input_header_name","Saucepan","data","isInHeaderEditMode","onHeaderEdit","onHeaderChanged","SaucepanHeader","renderEditButton","Core","onSaucepanAdded","saucepans","Date","now","onShowToastNotification","onSaucepanModified","saucepan","currentSaucepans","index","findIndex","pan","onSaucepanSwitched","currentSaucepanId","onSaucepanHeaderEdit","status","onSaucepanHeaderChanged","preventDefault","find","onSauceInsert","_question","_answer","onExitCreateMode","onSauceRemove","stopPropagation","filter","it","onSauceEdit","isInEditMode","currentSauce","onSauceUpdate","sauceId","onExitEditMode","onSauceCopied","navigator","clipboard","writeText","message","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","onEnterCreateMode","isInCreateMode","onEnterEditMode","isSauceRenderedInMarkdown","renderSaucepanHeader","isActive","renderSaucepan","renderSauceForm","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"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","file":"static/js/main.bf45c477.chunk.js","sourcesContent":["import React from 'react';\nimport { IconX } from '@tabler/icons';\n\nconst InputHint = (props) => {\n    var theme = \"uppercase text-sm\";\n    theme += props.marginY || \" my-1 \";\n    theme += props.hintColor || \" text-gray-200 \";\n    theme += props.fontWeight || \" font-semibold\";\n\n    return <div className={theme}>{props.hint}</div>\n}\n\nconst Input = (props) => {\n    var theme = \"rounded-md outline-none ring-2 \";\n    theme += props.marginY || \"my-2\";\n    theme += props.paddingX || \" px-2 \";\n    theme += props.paddingY || \" py-1 \";\n    theme += props.background || \" bg-gray-800 \";\n    theme += props.ringColor || \" ring-gray-500 \";\n    theme += props.ringColorFocus || \" focus:ring-indigo-500 \";\n    theme += props.textColor || \" text-white \";\n\n    return <input \n                className={theme}\n                type={props.type} \n                id={props.id} \n                name={props.name}\n                value={props.value}\n                onChange={props.onChange}/>\n}\n\nconst DismissButton = (props) => {\n    return  <button\n                className=\"w-max mr-2 p-2 rounded-md bg-transparent hover:bg-red-500 text-white\"\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                onClick={props.onClick}>\n                    <span className=\"flex items-center h-4\"><IconX/></span>\n                </button>\n}\n\nconst IconButton = (props) => {\n    var theme = \"w-max box-border rounded-md font-medium\";\n    theme += props.paddingX || \" px-2.5 \";\n    theme += props.paddingY || \" py-2 \";\n    theme += props.marginX || \" my-4 \";\n    theme += props.marginY || \" \";\n    theme += props.background || \" bg-indigo-500 \";\n    theme += props.backgroundHover || \" bg-indigo-700 \";\n    theme += props.textColor || \" text-white \";\n\n    return  <button\n                className={theme}\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                onClick={props.onClick}>\n                    { props.icon }\n                </button>\n}\n\nconst TextButton = (props) => {\n    var theme = \"w-full box-border rounded-md font-medium \";\n    theme += props.paddingX || \" px-2\";\n    theme += props.paddingY || \" py-2\";\n    theme += props.marginY || \" my-4\";\n    theme += props.background || \" bg-indigo-500\";\n    theme += props.backgroundHover || \" hover:bg-indigo-700\";\n    theme += props.textColor || \" text-white\";\n\n    return  <button\n                className={theme}\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                onClick={props.onClick}>\n                    {props.text}\n            </button>\n}\n\nconst NavigationItem = (props) => {\n    return  <button \n                className=\"w-full mt-2 p-2 rounded-md text-left bg-indigo-500 bg-opacity-20 text-indigo-500 hover:bg-indigo-700 hover:text-white\"\n                id={props.id}\n                name={props.name}\n                text={props.header} \n                onClick={props.onClick}>\n                    {props.header}\n            </button>\n}\n\nexport { TextButton, IconButton, DismissButton, NavigationItem, Input, InputHint }","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en_strings from './translations/en.json';\n\ni18n.use(LanguageDetector).init({\n    resources: {\n        en: {\n            translations: en_strings\n        }\n    },\n    fallbackLng: \"en\",\n    debug: true,\n\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n\n    keySeparator: false,\n\n    interpolation: {\n        escapeValue: false,\n        formatSeparator: \",\"\n    },\n\n    react: {\n        wait: true\n    }\n}).then();\n\nexport default i18n;","import React, { Component } from 'react';\nimport { Input, InputHint, TextButton, DismissButton } from '../components/components';\nimport i18n from '../i18n';\n\nconst insert_sauce_id = \"_insert_id\";\nconst insert_sauce_question = \"_insert_question\";\nconst insert_sauce_answer = \"_insert_answer\";\n\nconst update_sauce_id = \"_update_id\";\nconst update_sauce_question = \"_update_question\";\nconst update_sauce_answer = \"_update_answer\";\n\ntype HeaderProps = {\n    header: string,\n    onDismiss: Function\n}\n\nconst FormHeader = (props: HeaderProps) => {\n    return <div className=\"mb-8 flex flex-row items-center\">\n                <DismissButton onClick={() => props.onDismiss()}/>\n                <span className=\"my-1 font-semibold text-white text-2xl\">{i18n.t(props.header)}</span>\n            </div>\n}\n\ntype CreatorProps = {\n    saucepanId: number,\n    isShown: boolean,\n    onDismiss: Function,\n    onSubmit: Function,\n}\n\nclass Creator extends Component<CreatorProps, {}> {\n    render() {\n        var creatorTheme = \"p-4 bg-gray-800 \";\n        creatorTheme += this.props.isShown ? + \" inline-block\" : + \" hidden\";\n\n        return (\n            <div className={creatorTheme}>\n                <FormHeader header=\"header_create_sauce\" onDismiss={() => this.props.onDismiss()}/>                \n\n                <form onSubmit={e => this.props.onSubmit(this.props.saucepanId, e)}>\n                    <input\n                        type=\"hidden\"\n                        id={insert_sauce_id}\n                        name={insert_sauce_id}/>\n                    <InputHint hint={i18n.t(\"input_question\")}/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={insert_sauce_question}\n                        name={insert_sauce_question}/>\n                    <InputHint hint={i18n.t(\"input_answer\")}/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={insert_sauce_answer}\n                        name={insert_sauce_answer}/>\n                    <br/>\n                    <TextButton type=\"submit\" text={i18n.t(\"button_save\")}/>\n                </form>\n            </div>\n        );\n    }\n}\n\ntype EditorState = {\n    id: number,\n    question: string,\n    answer: string,\n}\n\ntype EditorProps = {\n    saucepanId: number,\n    id: number,\n    question: string, \n    answer: string\n    isShown: boolean,\n    onDismiss: Function,\n    onSubmit: Function,\n}\n\nclass Editor extends Component<EditorProps, EditorState> {\n    constructor(props: EditorProps) {\n        super(props);\n\n        this.state = {\n            id: this.props.id,\n            question: this.props.question,\n            answer: this.props.answer\n        }\n    }\n\n    render() {\n        var editorTheme = \"p-4 bg-gray-800 \";\n        editorTheme += this.props.isShown ? + \" inline-block\" : + \" hidden\";\n\n        return (\n            <div className={editorTheme}>\n                <FormHeader header=\"header_edit_sauce\" onDismiss={() => this.props.onDismiss()}/>                \n\n                <form onSubmit={e => this.props.onSubmit(this.props.saucepanId, this.props.id, e)}>\n                    <input\n                        type=\"hidden\"\n                        id={update_sauce_id}\n                        name={update_sauce_id}\n                        value={this.state.id}\n                        onChange={e => this.onInputChanged(e)}/>\n                    <InputHint hint={i18n.t(\"input_question\")}/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={update_sauce_question}\n                        name={update_sauce_question}\n                        value={this.state.question}\n                        onChange={e => this.onInputChanged(e)}/>\n                    <InputHint hint={i18n.t(\"input_answer\")}/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={update_sauce_answer}\n                        name={update_sauce_answer}\n                        value={this.state.answer}\n                        onChange={e => this.onInputChanged(e)}/>\n                    <br/>\n                    <TextButton type=\"submit\" text={i18n.t(\"button_save\")}/>\n                </form>\n            </div>\n        );\n    }\n\n    onInputChanged = event => {\n        switch(event.target.id) {\n            case update_sauce_id:\n                this.setState({ id: event.target.value });\n                break;\n            case update_sauce_question:\n                this.setState({ question: event.target.value });\n                break;\n            case update_sauce_answer:\n                this.setState({ answer: event.target.value });\n                break;\n            default: break;\n        }\n    }\n}\n\nexport { Creator, Editor };","import React from 'react';\nimport { IconButton } from '../components/components';\nimport { IconPencil, IconTrash, IconPlus } from '@tabler/icons';\nimport ReactMarkdown from 'react-markdown';\nimport { Sauce } from \"../core/types\";\n\nimport '../assets/output.css';\n\nconst md_bold = \"**\"\nconst md_code = \"```\"\n\ntype ListProps = {\n    sauces: Sauce[]\n    saucepanId: number,\n    autoRenderToMarkdown: boolean,\n    onCreate: Function\n    onEdit: Function,\n    onRemove: Function,\n    onCopy: Function\n}\n\nconst List = (props: ListProps) => {\n    const renderItem = (sauce: Sauce) => {\n        return <Item\n                    key={sauce.id}\n                    sauce={sauce}\n                    saucepanId={props.saucepanId}\n                    autoRenderToMarkdown={props.autoRenderToMarkdown}\n                    onEdit={props.onEdit}\n                    onRemove={props.onRemove}\n                    onCopy={props.onCopy}\n                />\n    }\n\n    return <div className=\"my-4 grid gap-2 grid-cols-auto-sauce grid-rows-auto-sauce\">\n                <button \n                    className=\"bg-gray-800 border border-dashed rounded-md border-gray-500 hover:bg-gray-600 hover:shadow-md transition text-white\" \n                    onClick={() => props.onCreate()}>\n                        <IconPlus className=\"mx-auto\"/>\n                </button>\n            { props.sauces.map(sauce => renderItem(sauce)) }\n        </div>\n}\n\ntype ItemProps = {\n    sauce: Sauce,\n    saucepanId: number,\n    autoRenderToMarkdown: boolean\n    onCopy: Function,\n    onEdit: Function,\n    onRemove: Function\n}\n\nconst Item = (props: ItemProps) => {\n    const sauce = props.sauce;\n\n    const question = md_bold.concat(sauce.question).concat(md_bold);\n    const answer = md_code.concat(sauce.answer).concat(md_code);\n    const output = question.concat(\"  \").concat(answer);\n\n    return (\n        <div className=\"flex flex-col justify-center p-4 border border-gray-600 rounded-md text-white\" onClick={() => props.onCopy(output)}>\n            <div className=\"text-lg\">\n                { props.autoRenderToMarkdown\n                    ? <ReactMarkdown>{question}</ReactMarkdown>\n                    : <span>{question}</span> }\n            </div>\n            <div className=\"text-md\">\n                { props.autoRenderToMarkdown\n                    ? <ReactMarkdown>{answer}</ReactMarkdown>\n                    : <span>{answer}</span> }\n            </div>\n            <div className=\"mt-4 space-x-2\">\n                <IconButton\n                    icon={<IconPencil/>}\n                    onClick={(e) => props.onEdit(sauce, e) }/>\n                <IconButton\n                    icon={<IconTrash/>}\n                    onClick={(e) => props.onRemove(props.saucepanId, sauce, e)}/>\n            </div>\n        </div>\n    );\n}\n\nexport { List, Item };","import i18n from '../i18n';\nimport React, { Component, Fragment } from 'react';\nimport { IconPencil } from \"@tabler/icons\";\nimport { Input } from '../components/components';\nimport { List } from '../sauces/sauces';\nimport { Pan } from \"../core/types\";\n\nconst input_header_id = \"input_id\";\nconst input_header_name = \"input_name\";\n\ntype SaucepanProps = {\n    data: Pan,\n    autoRenderToMarkdown: boolean,\n    isInHeaderEditMode: boolean,\n    onHeaderEdit: Function,\n    onHeaderChanged: Function,\n    onCreate: Function,\n    onEdit: Function,\n    onRemove: Function,\n    onCopy: Function\n}\n\nconst Saucepan = (props: SaucepanProps) => {\n    return (\n        <Fragment>\n            <SaucepanHeader\n                id={props.data.id}\n                header={props.data.name}\n                isInHeaderEditMode={props.isInHeaderEditMode}\n                onHeaderEdit={props.onHeaderEdit}\n                onHeaderChanged={props.onHeaderChanged}/>\n            <Fragment>\n                <List\n                    saucepanId={props.data.id}\n                    sauces={props.data.sauces}\n                    autoRenderToMarkdown={props.autoRenderToMarkdown}\n                    onCreate={props.onCreate}\n                    onEdit={props.onEdit}\n                    onRemove={props.onRemove}\n                    onCopy={props.onCopy}\n                />\n            </Fragment>\n        </Fragment>\n    );\n}\n\ntype SaucepanHeaderProps = {\n    id: number,\n    header: string,\n    isInHeaderEditMode: boolean,\n    onHeaderEdit: Function,\n    onHeaderChanged: Function\n}\n\ntype SaucepanHeaderState = {\n    header: string\n}\n\nclass SaucepanHeader extends Component<SaucepanHeaderProps, SaucepanHeaderState> {\n    constructor(props: SaucepanHeaderProps) {\n        super(props);\n\n        this.state = {\n            header: this.props.header !== null ? this.props.header : i18n.t(\"saucepan_name_fallback\")\n        }\n    }\n\n    render() {\n        const renderEditButton = () => {\n            if (!this.props.isInHeaderEditMode) {\n                return  <button \n                            className=\"text-xs text-transparent hover:text-white\" \n                            onClick={() => this.props.onHeaderEdit(true) }>\n                            <IconPencil/>\n                        </button>\n            }\n        }\n\n        const renderInputOrMarkdown = () => {\n            if (!this.props.isInHeaderEditMode) {\n                return <span className=\"font-bold text-3xl text-white\" onClick={() => this.props.onHeaderEdit(true)}>{this.state.header}</span>\n            } else {\n                return <form onSubmit={e => this.props.onHeaderChanged(e)}>\n                            <input\n                                type=\"hidden\"\n                                id={input_header_id}\n                                name={input_header_name}\n                                value={this.props.id}/>\n                            <Input\n                                type=\"text\"\n                                id={input_header_name}\n                                name={input_header_name}\n                                value={this.state.header}\n                                onChange={e => this.onInputChanged(e)}/>\n                            <input\n                                className=\"hidden\"\n                                type=\"submit\"\n                                id=\"input_submit\"/>\n                        </form>\n            }\n        }\n\n        return(\n            <div className=\"p-1\">\n                { renderInputOrMarkdown() }\n                { renderEditButton() }\n            </div>\n        );\n    }\n\n    onInputChanged = event => {\n        this.setState({ header: event.target.value });\n    }\n}\n\nexport { Saucepan };","import React, { Component, FormEvent, Fragment } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { IconButton, NavigationItem } from '../components/components';\nimport { IconPlus } from '@tabler/icons';\nimport { Creator, Editor } from '../form/form';\nimport { Saucepan } from '../saucepan/saucepan';\nimport { Sauce, Pan } from './types';\nimport i18n from '../i18n';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\ntype State = {\n    saucepans: Pan[],\n    currentSaucepanId: number,\n    isSauceRenderedInMarkdown: boolean,\n    isInCreateMode: boolean,\n    isInEditMode: boolean,\n    isInHeaderEditMode: boolean,\n    currentSauce: Sauce\n}\n\nclass Core extends Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        const saucepan: Pan = {\n            id: Date.now(),\n            name: null,\n            sauces: []\n        }\n        this.state = { \n            saucepans: [ saucepan ],\n            currentSaucepanId: saucepan.id,\n\n            isSauceRenderedInMarkdown: true,\n            isInCreateMode: false,\n            isInEditMode: false,\n            isInHeaderEditMode: false,\n            \n            currentSauce: null,\n        }\n    }\n\n    render() {\n\n        const renderSaucepanList = () => {\n            return (<Fragment>{\n                this.state.saucepans.map(saucepan => {\n                    let isActive: boolean = false;\n                    if (saucepan.id === this.state.currentSaucepanId) {\n                        isActive = true;\n                    }\n\n                    return <NavigationItem \n                                key={saucepan.id} \n                                header={renderSaucepanHeader(saucepan)} \n                                isActive={isActive}\n                                onClick={() => this.onSaucepanSwitched(saucepan)}/>\n                })\n            }</Fragment>)\n        }\n\n        const renderSaucepan = () => {\n            const index = this.state.saucepans.findIndex(saucepan => saucepan.id === this.state.currentSaucepanId);\n\n            if (index > -1) {\n                const saucepan = this.state.saucepans[index];\n\n                return <Saucepan\n                            data={saucepan}\n                            autoRenderToMarkdown={this.state.isSauceRenderedInMarkdown}\n                            isInHeaderEditMode={this.state.isInHeaderEditMode}\n                            onRemove={this.onSauceRemove}\n                            onEdit={this.onSauceEdit}\n                            onCreate={this.onEnterCreateMode}\n                            onCopy={this.onSauceCopied}\n                            onHeaderEdit={this.onSaucepanHeaderEdit}\n                            onHeaderChanged={this.onSaucepanHeaderChanged}/>\n            }\n        }\n\n        const renderSaucepanHeader = (saucepan: Pan) => {\n            if (saucepan.name !== null)\n                return <span>{saucepan.name}</span>\n            else return <span>{i18n.t(\"saucepan_name_fallback\")}</span>\n        }\n\n        const renderSauceForm = () => {\n            if (this.state.currentSauce !== null && this.state.isInEditMode) {\n                const sauce = this.state.currentSauce;\n\n                return <Editor\n                            id={sauce.id}\n                            question={sauce.question}\n                            answer={sauce.answer}\n                            saucepanId={this.state.currentSaucepanId}\n                            isShown={this.state.isInEditMode}\n                            onSubmit={this.onSauceUpdate}\n                            onDismiss={this.onExitEditMode}/>\n            } else if (this.state.isInCreateMode) {\n                return <Creator\n                            saucepanId={this.state.currentSaucepanId}\n                            isShown={this.state.isInCreateMode}\n                            onSubmit={this.onSauceInsert}\n                            onDismiss={this.onExitCreateMode}/>\n            }\n        } \n\n        return (\n            <div className=\"min-w-screen min-h-screen bg-gray-900\">\n                <div className=\"min-w-screen min-h-screen flex flex-row\">\n                    <div className=\"p-2 border-r-2 border-gray-700 flex-shrink-0 flex-grow-0 flex-navigation\">\n                        <div className=\"p-1\">\n                            <div className=\"my-4 font-medium text-2xl text-indigo-100\">{i18n.t(\"app_name\")}</div>\n                            <IconButton icon={<IconPlus/>} onClick={this.onSaucepanAdded}/>\n                            { renderSaucepanList() }\n                        </div>\n                    </div>\n                    <div className=\"p-4 flex-content\">{ renderSaucepan() }</div>\n                    { renderSauceForm() }\n                </div>\n                <ToastContainer />\n            </div>\n        );\n    }\n\n    onSaucepanAdded = () => {\n        this.setState({\n            saucepans: this.state.saucepans.concat({\n                id: Date.now(),\n                name: null,\n                sauces: []\n            }),\n        })\n        this.onShowToastNotification(\"feedback_saucepan_added\");\n    }\n    \n    onSaucepanModified = (saucepan: Pan) => {\n        let currentSaucepans: Pan[] = this.state.saucepans;\n        \n        let index = currentSaucepans.findIndex(pan => saucepan.id === pan.id);\n        if (index > - 1) {\n            currentSaucepans[index] = saucepan;\n\n            this.setState({\n                saucepans: currentSaucepans,\n            });\n        }\n    }\n\n    onSaucepanSwitched = (saucepan: Pan) => {\n        this.setState({ currentSaucepanId: saucepan.id });\n    }\n\n    onSaucepanHeaderEdit = (status: boolean) => {\n        this.setState({ isInHeaderEditMode: status });\n    }\n\n    onSaucepanHeaderChanged = (event: FormEvent)=> {\n        event.preventDefault();\n\n        const id: number = +event.target[0].value;\n        const name: string = event.target[1].value;\n\n        if (id !== null && name !== null) {\n            const saucepan = this.state.saucepans.find(saucepan => saucepan.id === id);\n\n            if (saucepan) {\n                saucepan.name = name;\n\n                this.onSaucepanHeaderEdit(false);\n                this.onSaucepanModified(saucepan);\n            }\n        }\n    }\n\n    onSauceInsert = (saucepanId: number, event: FormEvent) => {\n        event.preventDefault();\n\n        const _question: string = event.target[1].value;\n        const _answer: string = event.target[2].value;\n\n        if (_question === \"\" || _answer === \"\")\n                return\n\n        const sauce: Sauce = {\n            id: Date.now(),\n            question: _question,\n            answer: _answer\n        };\n\n        const saucepan = this.state.saucepans.find(saucepan => saucepanId === saucepan.id);\n        if (saucepan) {\n            saucepan.sauces = saucepan.sauces.concat(sauce);\n            \n            this.onSaucepanModified(saucepan);\n            this.onShowToastNotification(\"feedback_sauce_added\");\n            this.onExitCreateMode();\n        }\n    }\n\n    onSauceRemove = (saucepanId: number, sauce: Sauce, event: FormEvent) => {\n        event.stopPropagation();\n\n        const saucepan = this.state.saucepans.find(saucepan => saucepan.id === saucepanId);\n        if (saucepan) {\n            saucepan.sauces = saucepan.sauces.filter(function(it) {\n                return it.id !== sauce.id;\n            });\n\n            this.onSaucepanModified(saucepan);\n            this.onShowToastNotification(\"feedback_sauce_removed\");\n        }\n    }\n\n    onSauceEdit = (sauce: Sauce, event: FormEvent) => {\n        event.stopPropagation();\n\n        this.setState({\n            isInEditMode: true,\n            currentSauce: sauce,\n        });\n    }\n\n    onSauceUpdate = (saucepanId: number, sauceId: number, event: FormEvent) => {\n        event.preventDefault();\n\n        const _question = event.target[1].value;\n        const _answer = event.target[2].value;\n        if (_question === \"\" || _answer === \"\") {\n            return\n        }\n\n        const saucepan = this.state.saucepans.find(saucepan => saucepan.id === saucepanId);\n\n        if (saucepan) {\n            const index = saucepan.sauces.findIndex(sauce => sauce.id === sauceId);\n\n            if (index > -1) {\n                const sauce = saucepan.sauces[index];\n                sauce.question = _question;\n                sauce.answer = _answer;\n\n                saucepan.sauces[index] = sauce;\n\n                this.onSaucepanModified(saucepan);\n                this.onShowToastNotification(\"feedback_sauce_updated\");\n                this.onExitEditMode();\n            }\n        }\n    }\n\n    onSauceCopied = (output: string) => {\n        navigator.clipboard.writeText(output)\n            .then(() => {\n                this.onShowToastNotification(\"feedback_sauce_copied\");\n            });\n    }\n\n    onShowToastNotification = (message: string) => {\n        toast.dark(i18n.t(message), {\n            position: \"bottom-right\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n        })\n    }\n\n    onEnterCreateMode = () => {\n        this.setState({\n            isInCreateMode: true,\n            isInEditMode: false,\n        });\n    }\n    onExitCreateMode = () => {\n        this.setState({\n            isInCreateMode: false,\n            currentSauce: null\n        });\n    }\n\n    onEnterEditMode = () => {\n        this.setState({\n            isInEditMode: true\n        });\n    }\n    onExitEditMode = () => {\n        this.setState({\n            isInCreateMode: false,\n            isInEditMode: false,\n            currentSauce: null,\n        });\n    }\n}\n\nexport { Core }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport { Core } from './core/core';\nimport i18n from './i18n';\n\nimport './assets/output.css';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<I18nextProvider i18n={i18n}>\n\t\t\t<Core />\n\t\t</I18nextProvider>\n\t</React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}