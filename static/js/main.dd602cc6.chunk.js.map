{"version":3,"sources":["components/components.js","i18n.js","form/form.tsx","sauces/sauces.tsx","saucepan/saucepan.tsx","core/core.tsx","index.tsx"],"names":["Label","props","theme","marginY","hintColor","fontWeight","className","htmlFor","hint","Input","paddingX","paddingY","background","ringColor","ringColorFocus","textColor","type","id","name","value","onChange","DismissButton","onClick","IconButton","marginX","backgroundHover","aria-label","label","icon","TextButton","text","NavigationItem","navigationTheme","isActive","header","i18n","use","LanguageDetector","init","resources","en","translations","en_strings","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","then","insert_sauce_id","insert_sauce_question","insert_sauce_answer","update_sauce_id","update_sauce_question","update_sauce_answer","FormHeader","onDismiss","t","Creator","creatorTheme","this","isShown","onSubmit","e","saucepanId","Component","Editor","onInputChanged","event","target","setState","question","answer","state","editorTheme","List","onCreate","sauces","map","sauce","autoRenderToMarkdown","onEdit","onRemove","onCopy","_id","renderItem","Item","concat","output","input_header_name","Saucepan","data","isInHeaderEditMode","onHeaderEdit","onHeaderChanged","SaucepanHeader","renderEditButton","Core","onSaucepanAdded","saucepans","Date","now","onShowToastNotification","onSaucepanModified","saucepan","currentSaucepans","index","findIndex","pan","onSaucepanSwitched","currentSaucepanId","onSaucepanHeaderEdit","status","onSaucepanHeaderChanged","preventDefault","find","onSauceInsert","_question","_answer","onExitCreateMode","onSauceRemove","stopPropagation","filter","it","onSauceEdit","isInEditMode","currentSauce","onSauceUpdate","sauceId","onExitEditMode","onSauceCopied","navigator","clipboard","writeText","message","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","onEnterCreateMode","isInCreateMode","onEnterEditMode","isSauceRenderedInMarkdown","renderSaucepanHeader","renderSaucepan","renderSauceForm","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"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","file":"static/js/main.dd602cc6.chunk.js","sourcesContent":["import React from 'react';\nimport { IconX } from '@tabler/icons';\n\nconst Label = (props) => {\n    let theme = \"uppercase text-sm\";\n    theme += props.marginY || \" my-1 \";\n    theme += props.hintColor || \" text-gray-200 \";\n    theme += props.fontWeight || \" font-semibold\";\n\n    return <label className={theme} htmlFor={props.htmlFor}>{props.hint}</label>\n}\n\nconst Input = (props) => {\n    let theme = \"rounded-md outline-none ring-2 \";\n    theme += props.marginY || \"my-2\";\n    theme += props.paddingX || \" px-2 \";\n    theme += props.paddingY || \" py-1 \";\n    theme += props.background || \" bg-gray-800 \";\n    theme += props.ringColor || \" ring-gray-500 \";\n    theme += props.ringColorFocus || \" focus:ring-indigo-500 \";\n    theme += props.textColor || \" text-white \";\n\n    return <input \n                className={theme}\n                type={props.type} \n                id={props.id} \n                name={props.name}\n                value={props.value}\n                onChange={props.onChange}/>\n}\n\nconst DismissButton = (props) => {\n    return  <button\n                className=\"w-max mr-2 p-2 rounded-md bg-transparent hover:bg-red-500 text-white\"\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                onClick={props.onClick}>\n                    <span className=\"flex items-center h-4\"><IconX/></span>\n                </button>\n}\n\nconst IconButton = (props) => {\n    let theme = \"w-max box-border rounded-md font-medium\";\n    theme += props.paddingX || \" px-2.5 \";\n    theme += props.paddingY || \" py-2 \";\n    theme += props.marginX || \" my-4 \";\n    theme += props.marginY || \" \";\n    theme += props.background || \" bg-indigo-500 \";\n    theme += props.backgroundHover || \" bg-indigo-700 \";\n    theme += props.textColor || \" text-white \";\n\n    return  <button\n                className={theme}\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                aria-label={props.label}\n                onClick={props.onClick}>\n                    { props.icon }\n                </button>\n}\n\nconst TextButton = (props) => {\n    let theme = \"w-full box-border rounded-md font-medium \";\n    theme += props.paddingX || \" px-2\";\n    theme += props.paddingY || \" py-2\";\n    theme += props.marginY || \" my-4\";\n    theme += props.background || \" bg-indigo-500\";\n    theme += props.backgroundHover || \" hover:bg-indigo-700\";\n    theme += props.textColor || \" text-white\";\n\n    return  <button\n                className={theme}\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                aria-label={props.text}\n                onClick={props.onClick}>\n                    {props.text}\n            </button>\n}\n\nconst NavigationItem = (props) => {\n    let navigationTheme = \"w-full mt-2 p-2 rounded-md text-left hover:bg-indigo-700 hover:text-white \";\n    navigationTheme += props.isActive ? \" bg-indigo-400 bg-opacity-10 text-indigo-400\" : \" text-white \";\n\n    return  <button \n                className={navigationTheme}\n                id={props.id}\n                name={props.name}\n                onClick={props.onClick}\n                aria-label={props.header}>\n                    {props.header}\n            </button>\n}\n\nexport { TextButton, IconButton, DismissButton, NavigationItem, Input, Label }","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en_strings from './translations/en.json';\n\ni18n.use(LanguageDetector).init({\n    resources: {\n        en: {\n            translations: en_strings\n        }\n    },\n    fallbackLng: \"en\",\n    debug: true,\n\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n\n    keySeparator: false,\n\n    interpolation: {\n        escapeValue: false,\n        formatSeparator: \",\"\n    },\n\n    react: {\n        wait: true\n    }\n}).then();\n\nexport default i18n;","import React, { Component } from 'react';\nimport { Input, Label, TextButton, DismissButton } from '../components/components';\nimport i18n from '../i18n';\n\nconst insert_sauce_id = \"_insert_id\";\nconst insert_sauce_question = \"_insert_question\";\nconst insert_sauce_answer = \"_insert_answer\";\n\nconst update_sauce_id = \"_update_id\";\nconst update_sauce_question = \"_update_question\";\nconst update_sauce_answer = \"_update_answer\";\n\ntype HeaderProps = {\n    header: string,\n    onDismiss: Function\n}\n\nconst FormHeader = (props: HeaderProps) => {\n    return <div className=\"mb-8 flex flex-row items-center\">\n                <DismissButton onClick={() => props.onDismiss()}/>\n                <span className=\"my-1 font-semibold text-white text-2xl\">{i18n.t(props.header)}</span>\n            </div>\n}\n\ntype CreatorProps = {\n    saucepanId: number,\n    isShown: boolean,\n    onDismiss: Function,\n    onSubmit: Function,\n}\n\nclass Creator extends Component<CreatorProps, {}> {\n    render() {\n        var creatorTheme = \"p-4 bg-gray-800 \";\n        creatorTheme += this.props.isShown ? + \" inline-block\" : + \" hidden\";\n\n        return (\n            <div className={creatorTheme}>\n                <FormHeader header=\"header_create_sauce\" onDismiss={() => this.props.onDismiss()}/>                \n\n                <form onSubmit={e => this.props.onSubmit(this.props.saucepanId, e)}>\n                    <input\n                        type=\"hidden\"\n                        id={insert_sauce_id}\n                        name={insert_sauce_id}/>\n                    <Label hint={i18n.t(\"input_question\")} htmlFor={insert_sauce_question}/>\n                    <br/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={insert_sauce_question}\n                        name={insert_sauce_question}/>\n                    <br/>\n                    <Label hint={i18n.t(\"input_answer\")} htmlFor={insert_sauce_answer}/>\n                    <br/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={insert_sauce_answer}\n                        name={insert_sauce_answer}/>\n                    <br/>\n                    <TextButton type=\"submit\" text={i18n.t(\"button_save\")}/>\n                </form>\n            </div>\n        );\n    }\n}\n\ntype EditorState = {\n    id: number,\n    question: string,\n    answer: string,\n}\n\ntype EditorProps = {\n    saucepanId: number,\n    id: number,\n    question: string, \n    answer: string\n    isShown: boolean,\n    onDismiss: Function,\n    onSubmit: Function,\n}\n\nclass Editor extends Component<EditorProps, EditorState> {\n    constructor(props: EditorProps) {\n        super(props);\n\n        this.state = {\n            id: this.props.id,\n            question: this.props.question,\n            answer: this.props.answer\n        }\n    }\n\n    render() {\n        let editorTheme = \"p-4 bg-gray-800 \";\n        editorTheme += this.props.isShown ? + \" inline-block\" : + \" hidden\";\n\n        return (\n            <div className={editorTheme}>\n                <FormHeader header=\"header_edit_sauce\" onDismiss={() => this.props.onDismiss()}/>                \n\n                <form onSubmit={e => this.props.onSubmit(this.props.saucepanId, this.props.id, e)}>\n                    <input\n                        type=\"hidden\"\n                        id={update_sauce_id}\n                        name={update_sauce_id}\n                        value={this.state.id}\n                        onChange={e => this.onInputChanged(e)}/>\n                    <Label hint={i18n.t(\"input_question\")} htmlFor={update_sauce_question}/>\n                    <br/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={update_sauce_question}\n                        name={update_sauce_question}\n                        value={this.state.question}\n                        onChange={e => this.onInputChanged(e)}/>\n                    <br/>\n                    <Label hint={i18n.t(\"input_answer\")} htmlFor={update_sauce_answer}/>\n                    <br/>\n                    <Input\n                        background=\"bg-gray-700\"\n                        type=\"text\"\n                        id={update_sauce_answer}\n                        name={update_sauce_answer}\n                        value={this.state.answer}\n                        onChange={e => this.onInputChanged(e)}/>\n                    <br/>\n                    <TextButton type=\"submit\" text={i18n.t(\"button_save\")}/>\n                </form>\n            </div>\n        );\n    }\n\n    onInputChanged = event => {\n        switch(event.target.id) {\n            case update_sauce_id:\n                this.setState({ id: event.target.value });\n                break;\n            case update_sauce_question:\n                this.setState({ question: event.target.value });\n                break;\n            case update_sauce_answer:\n                this.setState({ answer: event.target.value });\n                break;\n            default: break;\n        }\n    }\n}\n\nexport { Creator, Editor };","import React, { FormEvent } from 'react';\nimport { IconButton } from '../components/components';\nimport { IconPencil, IconTrash, IconPlus } from '@tabler/icons';\nimport ReactMarkdown from 'react-markdown';\nimport { Sauce } from \"../core/types\";\nimport i18n from '../i18n';\n\nimport '../assets/output.css';\n\nconst md_bold = \"**\"\nconst md_code = \"```\"\n\ntype ListProps = {\n    sauces: Sauce[]\n    saucepanId: number,\n    autoRenderToMarkdown: boolean,\n    onCreate: Function\n    onEdit: Function,\n    onRemove: Function,\n    onCopy: Function\n}\n\nconst List = (props: ListProps) => {\n    const renderItem = (sauce: Sauce) => {\n        return <Item\n                    key={sauce._id}\n                    sauce={sauce}\n                    saucepanId={props.saucepanId}\n                    autoRenderToMarkdown={props.autoRenderToMarkdown}\n                    onEdit={props.onEdit}\n                    onRemove={props.onRemove}\n                    onCopy={props.onCopy}\n                />\n    }\n\n    return <div className=\"my-4 grid gap-2 grid-cols-auto-sauce grid-rows-auto-sauce\">\n                <button \n                    className=\"bg-gray-800 border border-dashed rounded-md border-gray-500 hover:bg-gray-600 hover:shadow-md transition text-white\" \n                    onClick={() => props.onCreate()}>\n                        <IconPlus className=\"mx-auto\"/>\n                </button>\n            { props.sauces.map(sauce => renderItem(sauce)) }\n        </div>\n}\n\ntype ItemProps = {\n    sauce: Sauce,\n    saucepanId: number,\n    autoRenderToMarkdown: boolean\n    onCopy: Function,\n    onEdit: Function,\n    onRemove: Function\n}\n\nconst Item = (props: ItemProps) => {\n    const sauce = props.sauce;\n\n    const question = md_bold.concat(sauce.question).concat(md_bold);\n    const answer = md_code.concat(sauce.answer).concat(md_code);\n    const output = question.concat(\"  \").concat(answer);\n\n    return (\n        <div\n            className=\"flex flex-col justify-center p-4 border rounded-md text-white cursor-pointer hover:bg-indigo-500 hover:border-indigo-500\"\n            onClick={() => props.onCopy(output)}>\n            <div className=\"text-lg\">\n                { props.autoRenderToMarkdown\n                    ? <ReactMarkdown>{question}</ReactMarkdown>\n                    : <span>{question}</span> }\n            </div>\n            <div className=\"text-md\">\n                { props.autoRenderToMarkdown\n                    ? <ReactMarkdown>{answer}</ReactMarkdown>\n                    : <span>{answer}</span> }\n            </div>\n            <div className=\"space-x-2\">\n                <IconButton\n                    icon={<IconPencil/>}\n                    label={i18n.t(\"button_edit\")}\n                    onClick={(e: FormEvent) => props.onEdit(sauce, e) }/>\n                <IconButton\n                    icon={<IconTrash/>}\n                    label={i18n.t(\"button_remove\")}\n                    onClick={(e: FormEvent) => props.onRemove(props.saucepanId, sauce, e) }/>\n            </div>\n        </div>\n    );\n}\n\nexport { List, Item };","import i18n from '../i18n';\nimport React, { Component, Fragment } from 'react';\nimport { IconPencil, IconMenu2 } from \"@tabler/icons\";\nimport { Input } from '../components/components';\nimport { List } from '../sauces/sauces';\nimport { Pan } from \"../core/types\";\n\nconst input_header_id = \"input_id\";\nconst input_header_name = \"input_name\";\n\ntype SaucepanProps = {\n    data: Pan,\n    autoRenderToMarkdown: boolean,\n    isInHeaderEditMode: boolean,\n    onHeaderEdit: Function,\n    onHeaderChanged: Function,\n    onCreate: Function,\n    onEdit: Function,\n    onRemove: Function,\n    onCopy: Function\n}\n\nconst Saucepan = (props: SaucepanProps) => {\n    return (\n        <Fragment>\n            <SaucepanHeader\n                id={props.data._id}\n                header={props.data.name}\n                isInHeaderEditMode={props.isInHeaderEditMode}\n                onHeaderEdit={props.onHeaderEdit}\n                onHeaderChanged={props.onHeaderChanged}/>\n            <Fragment>\n                <List\n                    saucepanId={props.data._id}\n                    sauces={props.data.sauces}\n                    autoRenderToMarkdown={props.autoRenderToMarkdown}\n                    onCreate={props.onCreate}\n                    onEdit={props.onEdit}\n                    onRemove={props.onRemove}\n                    onCopy={props.onCopy}\n                />\n            </Fragment>\n        </Fragment>\n    );\n}\n\ntype SaucepanHeaderProps = {\n    id: number,\n    header: string,\n    isInHeaderEditMode: boolean,\n    onHeaderEdit: Function,\n    onHeaderChanged: Function\n}\n\ntype SaucepanHeaderState = {\n    header: string\n}\n\nclass SaucepanHeader extends Component<SaucepanHeaderProps, SaucepanHeaderState> {\n    constructor(props: SaucepanHeaderProps) {\n        super(props);\n\n        this.state = {\n            header: this.props.header !== null ? this.props.header : i18n.t(\"saucepan_name_fallback\")\n        }\n    }\n\n    render() {\n        const renderEditButton = () => {\n            if (!this.props.isInHeaderEditMode) {\n                return  <button \n                            className=\"text-xs text-transparent hover:text-white\" \n                            onClick={() => this.props.onHeaderEdit(true) }>\n                            <IconPencil/>\n                        </button>\n            }\n        }\n\n        const renderInputOrMarkdown = () => {\n            if (!this.props.isInHeaderEditMode) {\n                return <span className=\"font-bold text-3xl text-white\" onClick={() => this.props.onHeaderEdit(true)}>{this.state.header}</span>\n            } else {\n                return <form className=\"inline-block\" onSubmit={e => this.props.onHeaderChanged(e)}>\n                            <input\n                                type=\"hidden\"\n                                id={input_header_id}\n                                name={input_header_name}\n                                value={this.props.id}/>\n                            <Input\n                                type=\"text\"\n                                id={input_header_name}\n                                name={input_header_name}\n                                value={this.state.header}\n                                onChange={e => this.onInputChanged(e)}/>\n                            <input\n                                className=\"hidden\"\n                                type=\"submit\"\n                                id=\"input_submit\"/>\n                        </form>\n            }\n        }\n\n        return (\n            <div className=\"p-1\">\n                <button className=\"mr-2 p-2 text-white md:hidden\"><IconMenu2/></button>\n                { renderInputOrMarkdown() }\n                { renderEditButton() }\n            </div>\n        );\n    }\n\n    onInputChanged = event => {\n        this.setState({ header: event.target.value });\n    }\n}\n\nexport { Saucepan };","import React, { Component, FormEvent, Fragment } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { IconButton, NavigationItem } from '../components/components';\nimport { IconPlus } from '@tabler/icons';\nimport { Creator, Editor } from '../form/form';\nimport { Saucepan } from '../saucepan/saucepan';\nimport { Sauce, Pan } from './types';\nimport i18n from '../i18n';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\ntype State = {\n    saucepans: Pan[],\n    currentSaucepanId: number,\n    isSauceRenderedInMarkdown: boolean,\n    isInCreateMode: boolean,\n    isInEditMode: boolean,\n    isInHeaderEditMode: boolean,\n    currentSauce: Sauce\n}\n\nclass Core extends Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        const saucepan: Pan = {\n            _id: Date.now(),\n            name: null,\n            sauces: []\n        }\n        this.state = { \n            saucepans: [ saucepan ],\n            currentSaucepanId: saucepan._id,\n\n            isSauceRenderedInMarkdown: true,\n            isInCreateMode: false,\n            isInEditMode: false,\n            isInHeaderEditMode: false,\n            \n            currentSauce: null,\n        }\n\n    }\n\n    render() {\n\n        const renderSaucepanList = () => {\n            return (<Fragment>{\n                this.state.saucepans.map(saucepan => {\n                    let isActive: boolean = false;\n                    if (saucepan._id === this.state.currentSaucepanId) {\n                        isActive = true;\n                    }\n\n                    return <NavigationItem \n                                key={saucepan._id} \n                                header={renderSaucepanHeader(saucepan)} \n                                isActive={isActive}\n                                onClick={() => this.onSaucepanSwitched(saucepan)}/>\n                })\n            }</Fragment>)\n        }\n\n        const renderSaucepan = () => {\n            const index = this.state.saucepans.findIndex(saucepan => saucepan._id === this.state.currentSaucepanId);\n\n            if (index > -1) {\n                const saucepan = this.state.saucepans[index];\n\n                return <Saucepan\n                            data={saucepan}\n                            autoRenderToMarkdown={this.state.isSauceRenderedInMarkdown}\n                            isInHeaderEditMode={this.state.isInHeaderEditMode}\n                            onRemove={this.onSauceRemove}\n                            onEdit={this.onSauceEdit}\n                            onCreate={this.onEnterCreateMode}\n                            onCopy={this.onSauceCopied}\n                            onHeaderEdit={this.onSaucepanHeaderEdit}\n                            onHeaderChanged={this.onSaucepanHeaderChanged}/>\n            }\n        }\n\n        const renderSaucepanHeader = (saucepan: Pan) => {\n            if (saucepan.name !== null)\n                return <span>{saucepan.name}</span>\n            else return <span>{i18n.t(\"saucepan_name_fallback\")}</span>\n        }\n\n        const renderSauceForm = () => {\n            if (this.state.currentSauce !== null && this.state.isInEditMode) {\n                const sauce = this.state.currentSauce;\n\n                return <Editor\n                            id={sauce._id}\n                            question={sauce.question}\n                            answer={sauce.answer}\n                            saucepanId={this.state.currentSaucepanId}\n                            isShown={this.state.isInEditMode}\n                            onSubmit={this.onSauceUpdate}\n                            onDismiss={this.onExitEditMode}/>\n            } else if (this.state.isInCreateMode) {\n                return <Creator\n                            saucepanId={this.state.currentSaucepanId}\n                            isShown={this.state.isInCreateMode}\n                            onSubmit={this.onSauceInsert}\n                            onDismiss={this.onExitCreateMode}/>\n            }\n        } \n\n        return (\n            <div className=\"min-w-screen min-h-screen bg-gray-900\">\n                <div className=\"w-screen min-h-screen fixed z-10 md:flex md:flex-row\">\n                    <div className=\"top-0 left-0 overflow-x-hidden hidden p-2 border-r-2 border-gray-700 flex-shrink-0 flex-grow-0 flex-navigation md:flex-md-navigation md:block\">\n                        <div className=\"p-1\">\n                            <div className=\"my-4 font-medium text-2xl text-indigo-100\">{i18n.t(\"app_name\")}</div>\n                            <IconButton icon={<IconPlus/>} onClick={this.onSaucepanAdded} label={i18n.t(\"button_add\")}/>\n                            { renderSaucepanList() }\n                        </div>\n                    </div>\n                    <div className=\"w-full p-4 flex-content md:flex-md-content\">{ renderSaucepan() }</div>\n                    { renderSauceForm() }   \n                </div>\n                <ToastContainer />\n            </div>\n        );\n    }\n\n    onSaucepanAdded = () => {\n        this.setState({\n            saucepans: this.state.saucepans.concat({\n                _id: Date.now(),\n                name: null,\n                sauces: []\n            }),\n        })\n        this.onShowToastNotification(\"feedback_saucepan_added\");\n    }\n    \n    onSaucepanModified = (saucepan: Pan) => {\n        let currentSaucepans: Pan[] = this.state.saucepans;\n        \n        let index = currentSaucepans.findIndex(pan => saucepan._id === pan._id);\n        if (index > - 1) {\n            currentSaucepans[index] = saucepan;\n\n            this.setState({\n                saucepans: currentSaucepans,\n            });\n        }\n    }\n\n    onSaucepanSwitched = (saucepan: Pan) => {\n        this.setState({ currentSaucepanId: saucepan._id });\n    }\n\n    onSaucepanHeaderEdit = (status: boolean) => {\n        this.setState({ isInHeaderEditMode: status });\n    }\n\n    onSaucepanHeaderChanged = (event: FormEvent)=> {\n        event.preventDefault();\n\n        const id: number = +event.target[0].value;\n        const name: string = event.target[1].value;\n\n        if (id !== null && name !== null) {\n            const saucepan = this.state.saucepans.find(saucepan => saucepan._id === id);\n\n            if (saucepan) {\n                saucepan.name = name;\n\n                this.onSaucepanHeaderEdit(false);\n                this.onSaucepanModified(saucepan);\n            }\n        }\n    }\n\n    onSauceInsert = (saucepanId: number, event: FormEvent) => {\n        event.preventDefault();\n\n        const _question: string = event.target[1].value;\n        const _answer: string = event.target[2].value;\n\n        if (_question === \"\" || _answer === \"\")\n                return\n\n        const sauce: Sauce = {\n            _id: Date.now(),\n            question: _question,\n            answer: _answer\n        };\n\n        const saucepan = this.state.saucepans.find(saucepan => saucepanId === saucepan._id);\n        if (saucepan) {\n            saucepan.sauces = saucepan.sauces.concat(sauce);\n            \n            this.onSaucepanModified(saucepan);\n            this.onShowToastNotification(\"feedback_sauce_added\");\n            this.onExitCreateMode();\n        }\n    }\n\n    onSauceRemove = (saucepanId: number, sauce: Sauce, event: FormEvent) => {\n        event.stopPropagation();\n\n        const saucepan = this.state.saucepans.find(saucepan => saucepan._id === saucepanId);\n        if (saucepan) {\n            saucepan.sauces = saucepan.sauces.filter(function(it) {\n                return it._id !== sauce._id;\n            });\n\n            this.onSaucepanModified(saucepan);\n            this.onShowToastNotification(\"feedback_sauce_removed\");\n        }\n    }\n\n    onSauceEdit = (sauce: Sauce, event: FormEvent) => {\n        event.stopPropagation();\n\n        this.setState({\n            isInEditMode: true,\n            currentSauce: sauce,\n        });\n    }\n\n    onSauceUpdate = (saucepanId: number, sauceId: number, event: FormEvent) => {\n        event.preventDefault();\n\n        const _question = event.target[1].value;\n        const _answer = event.target[2].value;\n        if (_question === \"\" || _answer === \"\") {\n            return\n        }\n\n        const saucepan = this.state.saucepans.find(saucepan => saucepan._id === saucepanId);\n\n        if (saucepan) {\n            const index = saucepan.sauces.findIndex(sauce => sauce._id === sauceId);\n\n            if (index > -1) {\n                const sauce = saucepan.sauces[index];\n                sauce.question = _question;\n                sauce.answer = _answer;\n\n                saucepan.sauces[index] = sauce;\n\n                this.onSaucepanModified(saucepan);\n                this.onShowToastNotification(\"feedback_sauce_updated\");\n                this.onExitEditMode();\n            }\n        }\n    }\n\n    onSauceCopied = (output: string) => {\n        navigator.clipboard.writeText(output)\n            .then(() => {\n                this.onShowToastNotification(\"feedback_sauce_copied\");\n            });\n    }\n\n    onShowToastNotification = (message: string) => {\n        toast.dark(i18n.t(message), {\n            position: \"bottom-right\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n        })\n    }\n\n    onEnterCreateMode = () => {\n        this.setState({\n            isInCreateMode: true,\n            isInEditMode: false,\n        });\n    }\n    onExitCreateMode = () => {\n        this.setState({\n            isInCreateMode: false,\n            currentSauce: null\n        });\n    }\n\n    onEnterEditMode = () => {\n        this.setState({\n            isInEditMode: true\n        });\n    }\n    onExitEditMode = () => {\n        this.setState({\n            isInCreateMode: false,\n            isInEditMode: false,\n            currentSauce: null,\n        });\n    }\n}\n\nexport { Core }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport {} from './reportWebVitals';\nimport { Core } from './core/core';\nimport i18n from './i18n';\n\nimport './assets/output.css';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<I18nextProvider i18n={i18n}>\n\t\t\t<Core />\n\t\t</I18nextProvider>\n\t</React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}