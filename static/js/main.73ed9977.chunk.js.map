{"version":3,"sources":["res.js","sauces/sauces.js","pan/pan.js","editor/editor.js","core/core.js","i18n.js","index.js"],"names":["documentStyle","getComputedStyle","document","body","colorOnPrimary","getPropertyValue","dimenIconSize","List","onCopyToClipboard","code","navigator","clipboard","writeText","className","onClick","this","props","onAddAction","id","sauces","map","sauce","saucepanId","autoRender","onEdit","onRemove","onCopy","Component","Item","question","concat","answer","output","renderToMarkdown","title","i18n","t","e","size","color","Pan","state","name","onEditorVisibilityStatusChange","isAutoRender","setState","input_sauce_id","input_sauce_question","input_sauce_answer","Editor","onValueChanged","event","target","value","_editorHeader","_id","_question","_answer","console","log","editorHeader","editorStatus","isShown","onDismiss","onSubmit","onInsert","panId","type","ref","a","inputSauceId","onChange","placeholder","inputSauceQuestion","inputSauceAnswer","Core","onSaucepanAdded","currentSaucepanSize","pans","length","pan","i18next","onShowToastNotification","onSauceInsert","preventDefault","Date","now","saucepan","onSaucepanModified","isEditorShown","onSauceRemove","stopPropagation","filter","it","onSauceEdit","message","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","currentPanIndex","buttonClassName","onSaucepanSwitched","renderPan","currentSaucepans","index","findIndex","status","use","LanguageDetector","init","resources","en","translations","en_strings","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","ReactDOM","render","StrictMode","I18nextProvider","getElementById"],"mappings":"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","file":"static/js/main.73ed9977.chunk.js","sourcesContent":["const documentStyle = getComputedStyle(document.body);\n\nconst colorPrimary = documentStyle.getPropertyValue(\"--color-primary\");\nconst colorPrimaryVariant = documentStyle.getPropertyValue(\"--color-primary-variant\");\nconst colorOnPrimary = documentStyle.getPropertyValue(\"--color-on-primary\");\nconst colorSecondary = documentStyle.getPropertyValue(\"--color-secondary\");\nconst colorSecondaryVariant = documentStyle.getPropertyValue(\"--color-secondary-variant\");\n\nconst dimenIconSize = documentStyle.getPropertyValue(\"--dimen-icon-size\");\n\nexport { \n    colorPrimary, colorPrimaryVariant, colorOnPrimary,\n    colorSecondary, colorSecondaryVariant,\n    dimenIconSize\n}","import { Component } from 'react';\nimport i18n from 'i18next';\nimport { HiOutlinePencil, HiOutlineTrash, HiOutlinePlus } from 'react-icons/hi';\nimport ReactMarkdown from 'react-markdown';\n\nimport './sauces.css';\nimport { colorOnPrimary, dimenIconSize } from '../res';\n\nconst md_bold = \"**\"\nconst md_code = \"```\"\n\nclass List extends Component {\n    render() {\n        return (\n            <div className=\"sauce-list\">\n                <button className=\"add-action\" onClick={ this.props.onAddAction }>\n                    <div className=\"wrapper\">\n                        <HiOutlinePlus id=\"icon\"/>\n                    </div>\n                </button>\n                { this.props.sauces.map( sauce => {\n                    return <Item \n                                saucepanId={ this.props.saucepanId }\n                                sauce={ sauce }\n                                key={ sauce.id }\n                                autoRender={ this.props.autoRender }\n                                onEdit={ this.props.onEdit }\n                                onRemove={ this.props.onRemove }\n                                onCopy={ this.onCopyToClipboard }\n                            />\n                })}\n            </div>\n        );\n    }\n        \n    onCopyToClipboard = (code) => {\n        navigator.clipboard.writeText(code);\n    }\n}\n\nclass Item extends Component {\n    render() {\n        const sauce = this.props.sauce;\n        \n        const renderToMarkdown = (question, answer) => {\n            if (this.props.autoRender) {\n                return <div>\n                            <div className=\"sauce-question\">\n                                <ReactMarkdown>{ question }</ReactMarkdown>\n                            </div>\n                            <div className=\"sauce-answer\">\n                                <ReactMarkdown>{ answer }</ReactMarkdown>\n                            </div>\n                        </div>\n            } else {\n                return  <div>\n                            <div className=\"sauce-question\">{question}</div>\n                            <div className=\"sauce-answer\">{answer}</div>\n                        </div>\n            }\n        }\n\n        const question = md_bold.concat(sauce.question).concat(md_bold);\n        const answer = md_code.concat(sauce.answer).concat(md_code);\n        const output = question.concat(\"  \").concat(answer);\n\n        return (\n            <button key={sauce.id} className=\"sauce-container\" onClick={() => this.props.onCopy(output) }>\n                <div>\n                    { renderToMarkdown(question, answer) }\n                </div>\n                <div className=\"button-container\">\n                    <div className=\"button-wrapper\">\n                        <button\n                            title={ i18n.t(\"button_copy\") } \n                            onClick={ (e) => this.props.onEdit(this.props.saucepanId, sauce, e) }>\n                                <HiOutlinePencil size={dimenIconSize} color={colorOnPrimary}/>\n                        </button>\n                    </div>\n                    <div className=\"button-wrapper\">\n                        <button\n                            title={ i18n.t(\"button_remove\") } \n                            onClick={ (e) => this.props.onRemove(this.props.saucepanId, sauce, e) }>\n                                <HiOutlineTrash size={dimenIconSize} color={colorOnPrimary}/>\n                        </button>\n                    </div>\n                </div>\n            </button>\n        );\n    }\n}\n\nexport { List, Item };","import { Component } from 'react';\nimport { List } from '../sauces/sauces';\n\nimport './pan.css';\n\nclass Pan extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { \n\t\t\tautoRender: true,\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"pan-root\">\n                <div className=\"container\">\n                    <div className=\"header\">{ this.props.name }</div>\n                    <div className=\"root-wrapper\">\n                        <List\n                            saucepanId={ this.props.id }\n                            sauces={ this.props.sauces }\n                            autoRender={ this.state.autoRender }\n                            onAddAction={ this.props.onEditorVisibilityStatusChange }\n                            onEdit={ this.props.onEdit }\n                            onRemove={ this.props.onRemove }\n                        />\n                    </div> \n                </div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\n    onAutoRenderStatusChange(isAutoRender)  {\n        this.setState({\n            autoRender: isAutoRender,\n        })\n    }\n}\n\nexport default Pan;","import { Component } from 'react';\nimport { HiX } from 'react-icons/hi';\nimport i18n from 'i18next';\n\nimport './editor.css';\n\nconst input_sauce_id = \"_sauce_id\";\nconst input_sauce_question = \"_sauce_question\";\nconst input_sauce_answer = \"_sauce_answer\";\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n\n        var _editorHeader = \"editor_new\";\n        var _id = \"\";\n        var _question = \"\";\n        var _answer = \"\";\n        if (this.props.sauce && this.props.sauce) {\n            console.log(\"true\");\n            _editorHeader = \"editor_edit\";\n            _id =  this.props.sauce.id;\n            _question = this.props.sauce.question;\n            _answer = this.props.sauce.answer;\n        }\n\n        this.state = { \n            editorHeader: _editorHeader,\n            id: _id,\n            question: _question,\n            answer: _answer,\n        }\n    }\n\n    onValueChanged = (event) => {\n        switch(event.target.id) {\n            case input_sauce_id:\n                this.setState({ id: event.target.value });\n                break;\n            case input_sauce_question:\n                this.setState({ question: event.target.value });\n                break;\n            case input_sauce_answer:\n                this.setState({ answer: event.target.value })\n                break;\n            default: break;\n        }\n    }\n\n    render() {\n\n        const editorStatus = this.props.isShown ? \"editor-root editor-show\" : \"editor-root editor-hide\"\n\n        return (\n            <div className={editorStatus}>\n                <div className=\"editor\">\n                    <div className=\"dismiss-button-wrapper\">\n                        <button className=\"dismiss-button\" onClick={this.props.onDismiss}><HiX id=\"icon\"/></button>\n                    </div>\n                    <div className=\"header\">{ i18n.t(this.state.editorHeader) }</div>\n\n                    <form className=\"editor-form\" onSubmit={ e => this.props.onInsert(this.props.panId, e) }>\n                        <input \n                            type=\"hidden\"\n                            id={input_sauce_id}\n                            name=\"inputSauceId\"\n                            value={this.state.id}\n                            ref={ (a) => this.inputSauceId = a }\n                            onChange={(e) => this.onValueChanged(e) }/>\n                        <br/>\n                        <input\n                            type=\"text\"\n                            id={input_sauce_question}\n                            name=\"inputSauceQuestion\"\n                            placeholder={ i18n.t(\"input_question\") }\n                            value={this.state.question}\n                            ref={ (a) => this.inputSauceQuestion = a}\n                            onChange={(e) => this.onValueChanged(e)} />\n                        <br/>\n                        <input\n                            type=\"text\"\n                            id={input_sauce_answer}\n                            name=\"inputSauceAnswer\"\n                            placeholder={ i18n.t(\"input_answer\") }\n                            value={this.state.answer}\n                            ref={ (a) => this.inputSauceAnswer = a }\n                            onChange={(e) => this.onValueChanged(e) } />\n                        <br/>\n                        <button type=\"submit\">{ i18n.t(\"button_save\") }</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Editor;","import i18next from 'i18next';\nimport { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify'; \nimport Pan from '../pan/pan';\nimport Editor from '../editor/editor';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport './core.css';\n\nclass Core extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            pans: [ { id: 0, name: i18next.t(\"pan_name_default\").concat(1), sauces: [] } ], \n            currentPanIndex: 0,\n            isEditorShown: false,\n        }\n    }\n\n    render() {\n        const renderPan = () => {\n            var pan = this.state.pans[this.state.currentPanIndex];\n            return <Pan \n                        id={ pan.id } \n                        name={ pan.name } \n                        sauces={ pan.sauces }\n                        onInsert={ this.onSauceInsert }\n                        onRemove={ this.onSauceRemove }\n                        onEdit={ this.onSauceEdit }\n                        onEditorVisibilityStatusChange={() => this.onEditorVisibilityStatusChange(true) }/>\n        }\n\n        return (\n            <div className=\"core-root\">\n                <div className=\"wrapper\">\n                    <div className=\"container\"> \n                        <div className=\"pan-item-container\">\n                            <div className=\"app-header\">{ i18next.t(\"app_name\") }</div>\n                            <div>\n                                <button className=\"pan-item-add\" onClick={ this.onSaucepanAdded }>\n                                    { i18next.t(\"button_new\") }\n                                </button>\n                            </div>\n                            {\n                            this.state.pans.map(pan => {\n                                var buttonClassName = \"pan-item\"\n                                if (pan.id === this.state.currentPanIndex) {\n                                    buttonClassName = buttonClassName + \" active\";\n                                }\n\n                                return <div key={pan.id}>\n                                            <button \n                                                className={buttonClassName} \n                                                onClick={() => this.onSaucepanSwitched(pan.id)}>\n                                                <span>{pan.name}</span>\n                                            </button>\n                                        </div>\n                            })\n                        }\n                        </div>\n                    </div>\n                    <div className=\"container\"> { renderPan() } </div>\n                </div>\n                <Editor \n                    panId={ this.state.currentPanIndex }\n                    isShown={ this.state.isEditorShown }\n                    onInsert={ this.onSauceInsert }\n                    onDismiss={() => this.onEditorVisibilityStatusChange(false) }\n                />\n                <ToastContainer />\n            </div>\n        );\n    }\n\n    onSaucepanAdded = () => {\n        var currentSaucepanSize = this.state.pans.length;\n\n        var pan = {\n            id: currentSaucepanSize,\n            name: i18next.t(\"pan_name_default\").concat(currentSaucepanSize + 1),\n            sauces: []\n        }\n\n        this.setState({\n            pans: this.state.pans.concat(pan),\n        })\n        this.onShowToastNotification(\"feedback_saucepan_added\");\n    }\n\n    onSaucepanModified(saucepan) {\n        var currentSaucepans = this.state.pans;\n        var index = currentSaucepans.findIndex(pan => saucepan.id === pan.id);\n        if (index > - 1) {\n            currentSaucepans[index] = saucepan;\n\n            this.setState({\n                pans: currentSaucepans,\n            });\n        }\n    }\n\n    onSaucepanSwitched(index) {\n        this.setState({ currentPanIndex: index })\n    }\n\n    onSauceInsert = (saucepanId, event) => {\n        event.preventDefault();\n        this.onEditorVisibilityStatusChange(false);\n\n        if (event.target.inputSauceQuestion.value === \"\" ||\n            event.target.inputSauceAnswer.value === \"\") {\n                return\n            }\n\n        var sauce = {\n            id: Date.now(),\n            question: event.target.inputSauceQuestion.value,\n            answer: event.target.inputSauceAnswer.value\n        }\n\n        var saucepan = this.state.pans[saucepanId];\n        saucepan.sauces = saucepan.sauces.concat(sauce);\n        this.onSaucepanModified(saucepan);\n    \n        this.onShowToastNotification(\"feedback_sauce_added\");\n        this.setState({ \n            isEditorShown: false,\n        });\n    }\n\n    onSauceRemove = (saucepanId, sauce, event) => {\n        event.stopPropagation();\n\n        var pan = this.state.pans[saucepanId];\n        pan.sauces = pan.sauces.filter(function(it) {\n            return it.id !== sauce.id;\n        })\n\n        this.onShowToastNotification(\"feedback_sauce_removed\");\n        this.onSaucepanModified(pan);\n    }\n\n    onSauceEdit = (saucepanId, sauce, event) => {\n        event.stopPropagation();\n\n        this.setState({\n            isEditorShown: true,\n        });\n    }\n\n    onEditorVisibilityStatusChange(status) {\n        this.setState({\n            isEditorShown: status,\n        })\n    }\n\n    onShowToastNotification = (message) => {\n        toast.dark(i18next.t(message), {\n            position: \"bottom-right\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n        })\n    }\n}\n\nexport default Core;","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en_strings from './translations/en.json';\n\ni18n.use(LanguageDetector).init({\n    resources: {\n        en: {\n            translations: en_strings\n        }\n    },\n    fallbackLng: \"en\",\n    debug: true,\n\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n\n    keySeparator: false,\n\n    interpolation: {\n        escapeValue: false,\n        formatSeparator: \",\"\n    },\n\n    react: {\n        wait: true\n    }\n})\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport Core from './core/core';\nimport i18n from './i18n';\n\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<I18nextProvider i18n={i18n}>\n\t\t\t<Core />\n\t\t</I18nextProvider>\n\t</React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}