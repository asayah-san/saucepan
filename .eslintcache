[{"/home/isaiahcollins/Projects/saucepan/src/index.js":"1","/home/isaiahcollins/Projects/saucepan/src/i18n.js":"2","/home/isaiahcollins/Projects/saucepan/src/res.js":"3","/home/isaiahcollins/Projects/saucepan/src/core/core.js":"4","/home/isaiahcollins/Projects/saucepan/src/sauces/sauces.js":"5","/home/isaiahcollins/Projects/saucepan/src/form/form.js":"6","/home/isaiahcollins/Projects/saucepan/src/saucepan/saucepan.js":"7"},{"size":357,"mtime":1608882408526,"results":"8","hashOfConfig":"9"},{"size":536,"mtime":1608563954561,"results":"10","hashOfConfig":"9"},{"size":663,"mtime":1608645298332,"results":"11","hashOfConfig":"9"},{"size":9274,"mtime":1609034155491,"results":"12","hashOfConfig":"9"},{"size":3261,"mtime":1608944516992,"results":"13","hashOfConfig":"9"},{"size":5115,"mtime":1609046852727,"results":"14","hashOfConfig":"9"},{"size":3195,"mtime":1609033089300,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9j0nui",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/isaiahcollins/Projects/saucepan/src/index.js",[],["32","33"],"/home/isaiahcollins/Projects/saucepan/src/i18n.js",[],"/home/isaiahcollins/Projects/saucepan/src/res.js",[],"/home/isaiahcollins/Projects/saucepan/src/core/core.js",["34"],"import React, { Component } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Creator, Editor } from '../form/form';\nimport { HiOutlinePlus } from \"react-icons/all\";\nimport Saucepan from '../saucepan/saucepan';\nimport i18next from 'i18next';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport './core.css';\n\n\nclass Core extends Component {\n    constructor(props) {\n        super(props);\n\n        const _currentSaucepanId = Date.now()\n        console.log(_currentSaucepanId);\n        this.state = { \n            saucepans: [ { id: _currentSaucepanId, name: null, sauces: [] } ],\n            currentSaucepanId: _currentSaucepanId,\n\n            isSauceRenderedInMarkdown: true,\n            isInCreateMode: false,\n            isInEditMode: false,\n            isInHeaderEditMode: false,\n            \n            currentSauce: null,\n        }\n    }\n\n    render() {\n        const renderSaucepanList = _ => {\n            return (<div>{\n                this.state.saucepans.map(saucepan => {\n                    let saucepanItemClassName = \"saucepan-item\";\n                    if (saucepan.id === this.state.currentSaucepanId) {\n                        saucepanItemClassName = saucepanItemClassName + \" active\";\n                    }\n\n                    return <button\n                        key={saucepan.id}\n                        className={saucepanItemClassName}\n                        onClick={() => this.onSaucepanSwitched(saucepan)}>\n                        {renderSaucepanHeader(saucepan)}\n                    </button>\n                })\n            }</div>)\n        }\n\n        const renderSaucepan = _ => {\n            const index = this.state.saucepans.findIndex(saucepan => saucepan.id === this.state.currentSaucepanId);\n\n            if (index > -1) {\n                const saucepan = this.state.saucepans[index];\n\n                return <Saucepan\n                            data={saucepan}\n                            autoRender={this.state.isSauceRenderedInMarkdown}\n                            isInHeaderEditMode={this.state.isInHeaderEditMode}\n                            onInsert={this.onSauceInsert}\n                            onRemove={this.onSauceRemove}\n                            onEdit={this.onSauceEdit}\n                            onCreate={this.onEnterCreateMode}\n                            onCopy={this.onSauceCopied}\n                            onHeaderEdit={this.onSaucepanHeaderEdit}\n                            onHeaderChanged={this.onSaucepanHeaderChanged}/>\n            }\n        }\n\n        const renderSaucepanHeader = saucepan => {\n            if (saucepan.name !== null)\n                return <span>{saucepan.name}</span>\n            else return <span>{i18next.t(\"pan_name_fallback\")}</span>\n        }\n\n        const renderSauceForm = _ => {\n            if (this.state.currentSauce !== null && this.state.isInEditMode) {\n                const sauce = this.state.currentSauce;\n\n                return <Editor\n                            id={sauce.id}\n                            question={sauce.question}\n                            answer={sauce.answer}\n                            saucepanId={this.state.currentSaucepanId}\n                            isShown={this.state.isInEditMode}\n                            onSubmit={this.onSauceUpdate}\n                            onDismiss={this.onExitEditMode}/>\n            } else if (this.state.isInCreateMode) {\n                return <Creator\n                            saucepanId={this.state.currentSaucepanId}\n                            isShown={this.state.isInCreateMode}\n                            onSubmit={this.onSauceInsert}\n                            onDismiss={this.onExitCreateMode}/>\n            }\n        }\n\n        return (\n            <div className=\"core-root\">\n                <div className=\"wrapper\">\n                    <div className=\"container\">\n                        <div className=\"navigation-container\">\n                            <div className=\"header\">{i18next.t(\"app_name\")}</div>\n                            <button className=\"saucepan-add\" onClick={this.onSaucepanAdded}>\n                                <HiOutlinePlus/>\n                            </button>\n                            {renderSaucepanList()}\n                        </div>\n                    </div>\n                    <div className=\"container\">{renderSaucepan()}</div>\n                    {renderSauceForm()}\n                </div>\n                <ToastContainer />\n            </div>\n        );\n    }\n\n    onSaucepanAdded = () => {\n        this.setState({\n            saucepans: this.state.saucepans.concat({\n                id: Date.now(),\n                name: null,\n                sauces: []\n            }),\n        })\n        this.onShowToastNotification(\"feedback_saucepan_added\");\n    }\n    \n    onSaucepanModified = saucepan => {\n        let currentSaucepans = this.state.saucepans;\n        let index = currentSaucepans.findIndex(pan => saucepan.id === pan.id);\n        if (index > - 1) {\n            currentSaucepans[index] = saucepan;\n\n            this.setState({\n                pans: currentSaucepans,\n            });\n        }\n    }\n\n    onSaucepanSwitched = saucepan => {\n        this.setState({ currentSaucepanId: saucepan.id });\n    }\n\n    onSaucepanHeaderEdit = status => {\n        this.setState({ isInHeaderEditMode: status });\n    }\n\n    onSaucepanHeaderChanged = event => {\n        event.preventDefault();\n\n        const id = event.target[0].value;\n        const name = event.target[1].value;\n\n        if (id !== \"\" && name !== \"\") {\n            var saucepan = this.state.saucepans.find(saucepan => saucepan.id == id);\n\n            if (saucepan) {\n                saucepan.name = name;\n\n                this.onSaucepanHeaderEdit(false);\n                this.onSaucepanModified(saucepan);\n            }\n        }\n    }\n\n    onSauceInsert = (saucepanId, event) => {\n        event.preventDefault();\n\n        if (event.target._insert_question.value === \"\" ||\n            event.target._insert_answer.value === \"\") {\n                return\n            }\n\n        const sauce = {\n            id: Date.now(),\n            question: event.target._insert_question.value,\n            answer: event.target._insert_answer.value\n        };\n\n        const index = this.state.saucepans.findIndex(saucepan => saucepanId === saucepan.id);\n        if (index > -1) {\n            const saucepan = this.state.saucepans[index];\n            saucepan.sauces = saucepan.sauces.concat(sauce);\n            this.onSaucepanModified(saucepan);\n\n            this.onShowToastNotification(\"feedback_sauce_added\");\n            this.onExitCreateMode();\n        }\n    }\n\n    onSauceRemove = (saucepanId, sauce, event) => {\n        event.stopPropagation();\n\n        const index = this.state.pans.findIndex(saucepan => saucepan.id === saucepanId);\n\n        if (index > -1) {\n            const pan = this.state.pans[index];\n            pan.sauces = pan.sauces.filter(function(it) {\n                return it.id !== sauce.id;\n            });\n\n            this.onShowToastNotification(\"feedback_sauce_removed\");\n            this.onSaucepanModified(pan);\n        }\n    }\n\n    onSauceEdit = (sauce, event) => {\n        event.stopPropagation();\n\n        this.setState({\n            isInEditMode: true,\n            currentSauce: sauce,\n        });\n    }\n\n    onSauceUpdate = (saucepanId, sauceId, event) => {\n        event.preventDefault();\n\n        if (event.target._update_question.value === \"\" ||\n            event.target._update_answer.value === \"\") {\n            return\n        }\n\n        const index = this.state.saucepans.findIndex(saucepan => saucepanId === saucepan.id);\n        if (index > -1) {\n            const saucepan = this.state.saucepans[index];\n\n            const sauceIndex = saucepan.sauces.findIndex(sauce => sauce.id === sauceId);\n            if (sauceIndex > -1) {\n                const sauce = saucepan.sauces[sauceIndex];\n                sauce.question = event.target._update_question.value;\n                sauce.answer = event.target._update_answer.value;\n\n                saucepan.sauces[sauceIndex] = sauce;\n                this.onSaucepanModified(saucepan);\n\n                this.onShowToastNotification(\"feedback_sauce_updated\");\n                this.onExitEditMode();\n            }\n        }\n    }\n\n    onSauceCopied = output => {\n        navigator.clipboard.writeText(output)\n            .then(() => {\n                this.onShowToastNotification(\"feedback_sauce_copied\");\n            });\n    }\n\n    onShowToastNotification = (message) => {\n        toast.dark(i18next.t(message), {\n            position: \"bottom-right\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n        })\n    }\n\n    onEnterCreateMode = _ => { this.setState({ isInCreateMode: true, currentSauce: null, isInEditMode: false }); }\n    onExitCreateMode = _ => { this.setState({ isInCreateMode: false, currentSauce: null }); }\n\n    onEnterEditMode = _ => { this.setState({ isInEditMode: true }); }\n    onExitEditMode = _ => { this.setState({ isInEditMode: false, currentSauce: null, isInCreateMode: false }); }\n}\n\nexport { Core }","/home/isaiahcollins/Projects/saucepan/src/sauces/sauces.js",[],"/home/isaiahcollins/Projects/saucepan/src/form/form.js",[],"/home/isaiahcollins/Projects/saucepan/src/saucepan/saucepan.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":155,"column":78,"nodeType":"41","messageId":"42","endLine":155,"endColumn":80},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]